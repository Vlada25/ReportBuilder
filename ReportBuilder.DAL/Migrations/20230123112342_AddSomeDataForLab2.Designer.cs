// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReportBuilder.DAL;

#nullable disable

namespace ReportBuilder.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230123112342_AddSomeDataForLab2")]
    partial class AddSomeDataForLab2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aaf4a7d4-6ddf-40ff-8e36-5533f5c1e4a9",
                            ConcurrencyStamp = "e09643b1-84cc-465e-ba42-768b2db01d0f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.LabsTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LabsTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Conclusion = "в ходе лабораторной работы изучил принцип работы датчиков тока и напряжения, а также на практике исследовал статические характеристики этих датчиков. По результатам  экспериментальных измерений было доказано, что зависимости измеряемых величин от входных значений имеют линейный характер, что облегчает съем измеряемых величин.",
                            Number = 1,
                            Purpose = "\n          1. Изучить принцип работы датчиков тока и напряжения\n          2. Исследовать статические характеристики датчиков тока и напряжения",
                            Theme = "Статические характеристики датчиков тока и напряжения"
                        },
                        new
                        {
                            Id = new Guid("3cfe4386-2c91-457e-a93b-ac90d7f4af4c"),
                            Conclusion = "в ходе работы был изучен принцип работы тахогенератора (тахогенератор работает в генераторном режиме, и, снимая с его обмоток ЭДС, можно вычислить частоту вращения) и энкодера (энкодер состоит из оптического датчика и перфорированного диска; подсчитывая количество импульсов, можно определить угол поворота вращающегося вала). Также были исследованы их характеристики.",
                            Number = 3,
                            Purpose = " изучить принцип работы тахогенератора и энкодера. Исследовать характеристики тахогенератора и энкодера.",
                            Theme = "Статические характеристики тахогенератора и энкодера"
                        },
                        new
                        {
                            Id = new Guid("5dc7ad45-59c5-4127-b209-97fc930bc3a2"),
                            Conclusion = "в ходе работы были изучены принцип работы датчиков линейного перемещения, а также исследованы характеристики датчиков линейного перемещения.",
                            Number = 4,
                            Purpose = " изучить принцип работы датчиков линейного перемещения. Исследовать характеристики датчиков линейного перемещения.",
                            Theme = "Статические характеристики датчиков линейного перемещения"
                        },
                        new
                        {
                            Id = new Guid("202b2d34-b93e-45db-935b-3a1d050f36bb"),
                            Conclusion = "в ходе работы были изучены на практике принцип работы бесконтактных датчиков-выключателей.",
                            Number = 5,
                            Purpose = " изучить устройство и принцип работы бесконтактных датчиков-выключателей.",
                            Theme = "Изучение принципа работы бесконтактных датчиков выключателей"
                        },
                        new
                        {
                            Id = new Guid("3c23fb4d-4efb-42e0-b9ba-86486e27f3fa"),
                            Conclusion = "в ходе лабораторной работы изучили принцип работы датчиков углового положения. Исследовали характеристики датчиков углового положения.",
                            Number = 6,
                            Purpose = "\n          1. Исследование потенциометра\n          2. Изучить принцип работы датчиков углового положения\n          3. Исследовать характеристики датчиков углового положения",
                            Theme = "Статические характеристики датчиков углового положения"
                        },
                        new
                        {
                            Id = new Guid("8133fde9-ab3a-4e8d-b819-4d543cdfa485"),
                            Conclusion = "в ходе лабораторной работы изучили устройство и принцип работы датчика давления. Исследовали статическую характеристику датчика давления.",
                            Number = 7,
                            Purpose = "\n          1. Изучить устройство и принцип работы датчика давления.\n          2. Исследовать статическую характеристику датчика давления\n",
                            Theme = "Статическая характеристика датчика давления"
                        });
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.ReportElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElementType")
                        .HasColumnType("int");

                    b.Property<Guid>("LabTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportElements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ReportElement");
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.ReportElements.ParagraphElement", b =>
                {
                    b.HasBaseType("ReportBuilder.DAL.Models.ReportElement");

                    b.HasDiscriminator().HasValue("ParagraphElement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("971c7491-7f53-440f-94c8-484132325a4e"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 0,
                            Text = "          1. Исследование шунта.\n          1.1. Собираем схему на рис.1 и снимаем значения Uш и Iн."
                        },
                        new
                        {
                            Id = new Guid("215596ee-3852-47e6-9220-ed1697eb1824"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 3,
                            Text = "          где Iш=Uш/Rш, Rш=100 мОм\n\n          1.2.Строим статическую характеристику Uш=f(Iн)."
                        },
                        new
                        {
                            Id = new Guid("0bb3286a-2129-417e-911c-e9cb6adec781"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 5,
                            Text = "\n          2.Исследование трансформатора тока.\n          2.1.Собираем схему на рис.3 и снимаем значения I1 и I2."
                        },
                        new
                        {
                            Id = new Guid("d46fffaa-fd6a-40e0-9fb0-d2e4fd58b33e"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 8,
                            Text = "\n          2.2.Строим статическую характеристику I2=f(I1)."
                        },
                        new
                        {
                            Id = new Guid("176ca2cb-45c4-4305-8db3-24d61d8215dd"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 10,
                            Text = "\n          3. Исследование измерительного трансформатора напряжения.\n          3.1. Собираем схему на рис.5 и снимаем значения U1 и U2."
                        },
                        new
                        {
                            Id = new Guid("23277a97-9df3-44a3-a6c9-18823052830f"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 13,
                            Text = "\n          3.2.Строим статическую характеристику U2=f(U1)."
                        },
                        new
                        {
                            Id = new Guid("ea88a7b8-a143-47cc-90af-b0bde1869596"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 15,
                            Text = "\n          4. Исследование датчика тока на эффекте Холла.\n          4.1. Собираем схему на рис.7 и снимаем значения I1 и I2."
                        },
                        new
                        {
                            Id = new Guid("d8d6126e-dbea-4942-a1e4-c4df5bdeea6f"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 18,
                            Text = "\n          4.2.Строим статическую характеристику I2=f(I1)."
                        },
                        new
                        {
                            Id = new Guid("f59bafb9-0ab4-47da-b97b-fbf53a372a67"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 20,
                            Text = "\n          5. Исследование датчика напряжения на эффекте Холла.\n          5.1. Собираем схему на рис.9 и снимаем значения U и I."
                        },
                        new
                        {
                            Id = new Guid("e7a8aca1-865c-40b4-8a1b-8131126273c7"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 23,
                            Text = "\n          5.2.Строим статическую характеристику I=f(U)."
                        },
                        new
                        {
                            Id = new Guid("549b288b-80fe-44b9-937c-570054fe1b05"),
                            ElementType = 0,
                            LabTemplateId = new Guid("3cfe4386-2c91-457e-a93b-ac90d7f4af4c"),
                            Number = 0,
                            Text = "          1. Подключаем стенд к однофазной сети переменного тока 220В, 50Гц.\n          2. Собираем схему источника регулируемого напряжения, как показано на рисунке 1."
                        },
                        new
                        {
                            Id = new Guid("6efd4fc8-b664-43e8-82e3-3ecb216ccf0d"),
                            ElementType = 0,
                            LabTemplateId = new Guid("3cfe4386-2c91-457e-a93b-ac90d7f4af4c"),
                            Number = 2,
                            Text = "          3. Подключаем мультиметр к гнездам тахогенератора BR1 и двигателя M1, как показано на рисунке 2. Выставляем пределы измерения 20В и 200В постоянного напряжения соответственно."
                        },
                        new
                        {
                            Id = new Guid("7adf8355-6e51-44a9-a30f-616ab77a23e5"),
                            ElementType = 0,
                            LabTemplateId = new Guid("3cfe4386-2c91-457e-a93b-ac90d7f4af4c"),
                            Number = 4,
                            Text = "          4. Регистрируем значение частоты вращения n на приборе EP1 и значение выходного напряжения Uг на тахогенераторе. Полученные данные заносим в таблицу 1."
                        });
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.ReportElements.PictureElement", b =>
                {
                    b.HasBaseType("ReportBuilder.DAL.Models.ReportElement");

                    b.Property<int>("PictureNumber")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PictureElement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("987b0e05-313b-4ab9-8881-6350cbecdce3"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 1,
                            Text = "Схема исследования шунта",
                            PictureNumber = 1
                        },
                        new
                        {
                            Id = new Guid("e17972fa-2bf6-4fa6-a7c3-bb24835549d9"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 4,
                            Text = "График зависимости Uш=f(Iн)",
                            PictureNumber = 2
                        },
                        new
                        {
                            Id = new Guid("fee1c284-cd16-4a86-9b13-a2354b02f500"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 6,
                            Text = "Схема исследования трансформатора тока",
                            PictureNumber = 3
                        },
                        new
                        {
                            Id = new Guid("d5e8c092-777e-46da-ad84-26f4ab0ab4b4"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 9,
                            Text = "График зависимости I2=f(I1)",
                            PictureNumber = 4
                        },
                        new
                        {
                            Id = new Guid("0e4eed54-121b-4309-99e4-4e46bf9fea9b"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 11,
                            Text = "Схема исследования трансформатора напряжения",
                            PictureNumber = 5
                        },
                        new
                        {
                            Id = new Guid("38049d06-d7ed-4b93-aec9-f69a241f0e87"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 14,
                            Text = "График зависимости U2=f(U1)",
                            PictureNumber = 6
                        },
                        new
                        {
                            Id = new Guid("7319c51b-c891-424d-bc27-127f7105c560"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 16,
                            Text = "Схема исследования датчика тока на эффекте Холла",
                            PictureNumber = 7
                        },
                        new
                        {
                            Id = new Guid("0f4fcee3-a05e-4f59-96b9-f8dc185a28b5"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 19,
                            Text = "График зависимости I2=f(I1)",
                            PictureNumber = 8
                        },
                        new
                        {
                            Id = new Guid("615b3580-c5cc-46a6-803a-28fac78e3826"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 21,
                            Text = "Схема исследования датчика напряжения на эффекте Холла",
                            PictureNumber = 9
                        },
                        new
                        {
                            Id = new Guid("35fe0914-89f7-4d30-9593-954a291d117a"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 24,
                            Text = "График зависимости I=f(U)",
                            PictureNumber = 10
                        },
                        new
                        {
                            Id = new Guid("28aaf1f5-41c7-432c-935f-f773315c15d8"),
                            ElementType = 1,
                            LabTemplateId = new Guid("3cfe4386-2c91-457e-a93b-ac90d7f4af4c"),
                            Number = 1,
                            Text = "Схема включения источника регулируемого напряжения",
                            PictureNumber = 1
                        },
                        new
                        {
                            Id = new Guid("35dbb6cb-1995-4c91-bc7b-afb5ab67d1bb"),
                            ElementType = 1,
                            LabTemplateId = new Guid("3cfe4386-2c91-457e-a93b-ac90d7f4af4c"),
                            Number = 3,
                            Text = "Схема исследования тахогенератора и энкодера",
                            PictureNumber = 2
                        });
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.ReportElements.TableElement", b =>
                {
                    b.HasBaseType("ReportBuilder.DAL.Models.ReportElement");

                    b.Property<int>("ColumnsCount")
                        .HasColumnType("int");

                    b.Property<string>("HorizontalTitles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowsCount")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<string>("VerticalTitles")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TableElement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0a5b848-e493-4186-a6c2-7d51c1609035"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 2,
                            Text = "Данные эксперимента",
                            ColumnsCount = 12,
                            RowsCount = 3,
                            TableNumber = 1,
                            VerticalTitles = "Uш,мВ;Iн,А;Iш,А"
                        },
                        new
                        {
                            Id = new Guid("9af2eff0-e703-4144-aabe-a9bf40efcfb8"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 7,
                            Text = "Данные эксперимента",
                            ColumnsCount = 9,
                            RowsCount = 2,
                            TableNumber = 2,
                            VerticalTitles = "I1,мА;I2,мА"
                        },
                        new
                        {
                            Id = new Guid("53181238-f215-4b14-bef9-f288bbbc4eca"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 12,
                            Text = "Данные эксперимента",
                            ColumnsCount = 12,
                            RowsCount = 2,
                            TableNumber = 3,
                            VerticalTitles = "U1,В;U2,В"
                        },
                        new
                        {
                            Id = new Guid("d2e6470b-0c02-451f-824d-49eee808868d"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 17,
                            Text = "Данные эксперимента",
                            ColumnsCount = 10,
                            RowsCount = 2,
                            TableNumber = 4,
                            VerticalTitles = "I1,А;I2,мА"
                        },
                        new
                        {
                            Id = new Guid("390df32c-bdba-4f43-8b6c-dad951c8b88a"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 22,
                            Text = "Данные эксперимента",
                            ColumnsCount = 12,
                            RowsCount = 2,
                            TableNumber = 5,
                            VerticalTitles = "U,В;I,мА"
                        },
                        new
                        {
                            Id = new Guid("5bbe836b-cf34-4bbf-96c4-c9badada3e2a"),
                            ElementType = 2,
                            LabTemplateId = new Guid("3cfe4386-2c91-457e-a93b-ac90d7f4af4c"),
                            Number = 5,
                            Text = "Данные эксперимента",
                            ColumnsCount = 5,
                            HorizontalTitles = "№ п/п;U1;Uг,В;n,об/мин;nг,об/мин",
                            RowsCount = 13,
                            TableNumber = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReportBuilder.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReportBuilder.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportBuilder.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReportBuilder.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
