// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReportBuilder.DAL;

#nullable disable

namespace ReportBuilder.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230123094500_ChangeDataForLab1")]
    partial class ChangeDataForLab1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "60bb650d-391a-47cc-a9cd-e6452976898f",
                            ConcurrencyStamp = "58784572-464d-4d69-96d8-423cea3b3ee7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.LabsTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LabsTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Conclusion = "в ходе лабораторной работы изучил принцип работы датчиков тока и напряжения, а также на практике исследовал статические характеристики этих датчиков. По результатам  экспериментальных измерений было доказано, что зависимости измеряемых величин от входных значений имеют линейный характер, что облегчает съем измеряемых величин.",
                            Number = 1,
                            Purpose = "\n          1. Изучить принцип работы датчиков тока и напряжения\n          2. Исследовать статические характеристики датчиков тока и напряжения",
                            Theme = "Статические характеристики датчиков тока и напряжения"
                        },
                        new
                        {
                            Id = new Guid("3cfe4386-2c91-457e-a93b-ac90d7f4af4c"),
                            Conclusion = "в ходе работы был изучен принцип работы тахогенератора (тахогенератор работает в генераторном режиме, и, снимая с его обмоток ЭДС, можно вычислить частоту вращения) и энкодера (энкодер состоит из оптического датчика и перфорированного диска; подсчитывая количество импульсов, можно определить угол поворота вращающегося вала). Также были исследованы их характеристики.",
                            Number = 3,
                            Purpose = " изучить принцип работы тахогенератора и энкодера. Исследовать характеристики тахогенератора и энкодера.",
                            Theme = "Статические характеристики тахогенератора и энкодера"
                        },
                        new
                        {
                            Id = new Guid("5dc7ad45-59c5-4127-b209-97fc930bc3a2"),
                            Conclusion = "в ходе работы были изучены принцип работы датчиков линейного перемещения, а также исследованы характеристики датчиков линейного перемещения.",
                            Number = 4,
                            Purpose = " изучить принцип работы датчиков линейного перемещения. Исследовать характеристики датчиков линейного перемещения.",
                            Theme = "Статические характеристики датчиков линейного перемещения"
                        },
                        new
                        {
                            Id = new Guid("202b2d34-b93e-45db-935b-3a1d050f36bb"),
                            Conclusion = "в ходе работы были изучены на практике принцип работы бесконтактных датчиков-выключателей.",
                            Number = 5,
                            Purpose = " изучить устройство и принцип работы бесконтактных датчиков-выключателей.",
                            Theme = "Изучение принципа работы бесконтактных датчиков выключателей"
                        },
                        new
                        {
                            Id = new Guid("3c23fb4d-4efb-42e0-b9ba-86486e27f3fa"),
                            Conclusion = "в ходе лабораторной работы изучили принцип работы датчиков углового положения. Исследовали характеристики датчиков углового положения.",
                            Number = 6,
                            Purpose = "\n          1. Исследование потенциометра\n          2. Изучить принцип работы датчиков углового положения\n          3. Исследовать характеристики датчиков углового положения",
                            Theme = "Статические характеристики датчиков углового положения"
                        },
                        new
                        {
                            Id = new Guid("8133fde9-ab3a-4e8d-b819-4d543cdfa485"),
                            Conclusion = "в ходе лабораторной работы изучили устройство и принцип работы датчика давления. Исследовали статическую характеристику датчика давления.",
                            Number = 7,
                            Purpose = "\n          1. Изучить устройство и принцип работы датчика давления.\n          2. Исследовать статическую характеристику датчика давления\n",
                            Theme = "Статическая характеристика датчика давления"
                        });
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.ReportElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElementType")
                        .HasColumnType("int");

                    b.Property<Guid>("LabTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportElements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ReportElement");
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.ReportElements.ParagraphElement", b =>
                {
                    b.HasBaseType("ReportBuilder.DAL.Models.ReportElement");

                    b.HasDiscriminator().HasValue("ParagraphElement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6e61783-53da-4a8b-a463-4160368d0270"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 0,
                            Text = "          1. Исследование шунта.\n          1.1. Собираем схему на рис.1 и снимаем значения Uш и Iн."
                        },
                        new
                        {
                            Id = new Guid("213b95c9-9c4e-4cc4-a822-32e3c0757e60"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 3,
                            Text = "          где Iш=Uш/Rш, Rш=100 мОм\n\n          1.2.Строим статическую характеристику Uш=f(Iн)."
                        },
                        new
                        {
                            Id = new Guid("b08dfa52-02ab-4356-919b-5a34c26f0954"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 5,
                            Text = "\n          2.Исследование трансформатора тока.\n          2.1.Собираем схему на рис.3 и снимаем значения I1 и I2."
                        },
                        new
                        {
                            Id = new Guid("a90009db-809c-4d67-a15c-80b5865aae48"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 8,
                            Text = "\n          2.2.Строим статическую характеристику I2=f(I1)."
                        },
                        new
                        {
                            Id = new Guid("efb4b48e-19b9-4810-a164-56872b734f14"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 10,
                            Text = "\n          3. Исследование измерительного трансформатора напряжения.\n          3.1. Собираем схему на рис.5 и снимаем значения U1 и U2."
                        },
                        new
                        {
                            Id = new Guid("075c375f-7a09-48e4-ba50-4da0a665ecd9"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 13,
                            Text = "\n          3.2.Строим статическую характеристику U2=f(U1)."
                        },
                        new
                        {
                            Id = new Guid("52587545-7936-4761-b602-28f62b41bc52"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 15,
                            Text = "\n          4. Исследование датчика тока на эффекте Холла.\n          4.1. Собираем схему на рис.7 и снимаем значения I1 и I2."
                        },
                        new
                        {
                            Id = new Guid("e558e12b-9d38-46b2-97e9-8a70ac7a0713"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 18,
                            Text = "\n          4.2.Строим статическую характеристику I2=f(I1)."
                        },
                        new
                        {
                            Id = new Guid("2c31d8b0-a296-4cb2-8445-f4551ab37948"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 20,
                            Text = "\n          5. Исследование датчика напряжения на эффекте Холла.\n          5.1. Собираем схему на рис.9 и снимаем значения U и I."
                        },
                        new
                        {
                            Id = new Guid("8811f813-d0fa-47ae-a2b0-95121901772f"),
                            ElementType = 0,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 23,
                            Text = "\n          5.2.Строим статическую характеристику I=f(U)."
                        });
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.ReportElements.PictureElement", b =>
                {
                    b.HasBaseType("ReportBuilder.DAL.Models.ReportElement");

                    b.Property<int>("PictureNumber")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PictureElement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6ec28a2-14fa-4f4c-908e-d7515964db3b"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 1,
                            Text = "Схема исследования шунта",
                            PictureNumber = 1
                        },
                        new
                        {
                            Id = new Guid("8b007e14-7cf7-4775-be4a-95496b04d756"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 4,
                            Text = "График зависимости Uш=f(Iн)",
                            PictureNumber = 2
                        },
                        new
                        {
                            Id = new Guid("72d8f395-b14c-4e0d-8cc4-a0d40bdc9010"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 6,
                            Text = "Схема исследования трансформатора тока",
                            PictureNumber = 3
                        },
                        new
                        {
                            Id = new Guid("414f9b63-ec69-41c9-98a0-5e2ee3dd1ef1"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 9,
                            Text = "График зависимости I2=f(I1)",
                            PictureNumber = 4
                        },
                        new
                        {
                            Id = new Guid("37226d0e-7681-4dd4-ad05-a112feedc754"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 11,
                            Text = "Схема исследования трансформатора напряжения",
                            PictureNumber = 5
                        },
                        new
                        {
                            Id = new Guid("7a0eab93-25c1-49a3-b1c7-72daa2afb8bc"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 14,
                            Text = "График зависимости U2=f(U1)",
                            PictureNumber = 6
                        },
                        new
                        {
                            Id = new Guid("2d672f99-7ca5-420b-98a5-2dfc028f0e49"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 16,
                            Text = "Схема исследования датчика тока на эффекте Холла",
                            PictureNumber = 7
                        },
                        new
                        {
                            Id = new Guid("2651fded-caaf-4096-b8cb-2642be45fa18"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 19,
                            Text = "График зависимости I2=f(I1)",
                            PictureNumber = 8
                        },
                        new
                        {
                            Id = new Guid("dba05c5d-2117-4aa7-bc4b-b0d9edc1ca90"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 21,
                            Text = "Схема исследования датчика напряжения на эффекте Холла",
                            PictureNumber = 9
                        },
                        new
                        {
                            Id = new Guid("d59c841f-a25f-4c57-9da1-db8101ea7fdf"),
                            ElementType = 1,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 24,
                            Text = "График зависимости I=f(U)",
                            PictureNumber = 10
                        });
                });

            modelBuilder.Entity("ReportBuilder.DAL.Models.ReportElements.TableElement", b =>
                {
                    b.HasBaseType("ReportBuilder.DAL.Models.ReportElement");

                    b.Property<int>("ColumnsCount")
                        .HasColumnType("int");

                    b.Property<string>("HorizontalTitles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowsCount")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<string>("VerticalTitles")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TableElement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c7caf3f-f434-4ed8-ad01-e73e8ede9c20"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 2,
                            Text = "Данные эксперимента",
                            ColumnsCount = 12,
                            RowsCount = 3,
                            TableNumber = 1,
                            VerticalTitles = "Uш,мВ;Iн,А;Iш,А"
                        },
                        new
                        {
                            Id = new Guid("a9e7c479-ec78-4b40-a995-4c1a9619a27a"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 7,
                            Text = "Данные эксперимента",
                            ColumnsCount = 9,
                            RowsCount = 2,
                            TableNumber = 2,
                            VerticalTitles = "I1,мА;I2,мА"
                        },
                        new
                        {
                            Id = new Guid("8f4cd9e7-e2e8-44bb-9350-6d674ef24c79"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 12,
                            Text = "Данные эксперимента",
                            ColumnsCount = 12,
                            RowsCount = 2,
                            TableNumber = 3,
                            VerticalTitles = "U1,В;U2,В"
                        },
                        new
                        {
                            Id = new Guid("fc0bba91-22c7-4005-bddc-c7acaefd3879"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 17,
                            Text = "Данные эксперимента",
                            ColumnsCount = 10,
                            RowsCount = 2,
                            TableNumber = 4,
                            VerticalTitles = "I1,А;I2,мА"
                        },
                        new
                        {
                            Id = new Guid("6e5960cc-329a-45e4-a16c-ec01b6af9f1f"),
                            ElementType = 2,
                            LabTemplateId = new Guid("593a046b-d4f9-4110-a851-3e81a2871f7a"),
                            Number = 22,
                            Text = "Данные эксперимента",
                            ColumnsCount = 12,
                            RowsCount = 2,
                            TableNumber = 5,
                            VerticalTitles = "U,В;I,мА"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReportBuilder.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReportBuilder.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportBuilder.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReportBuilder.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
